#!/usr/bin/env python3
'''A simple script to transform a MathLink C or C++ file to a WSTP one.

Usage:
    ./ml_to_wstp.py source_file target_file

    source_file: Path of the C or C++ file using MathLink.
    target_file: Path of the to-be-generated C or C++ file using WSTP.
'''

########################################################################
# Copyright (C) 2020 Christopher Lepenik
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
########################################################################

import sys


def strip_folders(path: str) -> str:
    slash_pos = path.rfind('/')
    return path if slash_pos == -1 else path[slash_pos + 1:]


def ml_to_wstp(source_file: str, target_file: str) -> None:
    replace_strings = {
        'MLAbort': 'WSAbort',
        'MLActivate': 'WSActivate',
        'MLAlloc': 'WSAlloc',
        'MLBrowse': 'WSBrowse',
        'MLBytes': 'WSBytes',
        'MLCheck': 'WSCheck',
        'MLClear': 'WSClear',
        'MLClose': 'WSClose',
        'MLContext': 'WSContext',
        'MLCreate': 'WSCreate',
        'MLDeallocator': 'WSDeallocator',
        'MLDeinitialize': 'WSDeinitialize',
        'MLDestroy': 'WSDestroy',
        'MLDisable': 'WSDisable',
        'MLDoNot': 'WSDoNot',
        'MLDuplicate': 'WSDuplicate',
        'MLEnable': 'WSEnable',
        'MLEnd': 'WSEnd',
        'MLENV': 'WSENV',
        'MLEnvironment': 'WSEnvironment',
        'MLError': 'WSError',
        'MLEvaluate': 'WSEvaluate',
        'MLFlush': 'WSFlush',
        'MLFrom': 'WSFrom',
        'MLGet': 'WSGet',
        'MLHandle': 'WSHandle',
        'MLInitialize': 'WSInitialize',
        'MLInterface': 'WSInterface',
        'MLIsLink': 'WSIsLink',
        'MLLink': 'WSLink',
        'MLINK': 'WSLINK',
        'MLLog': 'WSLog',
        'MLLoop': 'WSLoop',
        'MLLow': 'WSLow',
        'MLMain': 'WSMain',
        'MLMARK': 'WSMARK',
        'MLMessage': 'WSMessage',
        'MLNew': 'WSNew',
        'MLNext': 'WSNext',
        'MLOpen': 'WSOpen',
        'MLPut': 'WSPut',
        'MLReady': 'WSReady',
        'MLRegister': 'WSRegister',
        'MLRelease': 'WSRelease',
        'MLResolve': 'WSResolve',
        'MLSeek': 'WSSeek',
        'MLService': 'WSService',
        'MLSet': 'WSSet',
        'MLShutdown': 'WSShutdown',
        'MLStop': 'WSStop',
        'MLTest': 'WSTest',
        'MLToLink': 'WSToLink',
        'MLTransfer': 'WSTransfer',
        'MLUCS': 'WSUCS',
        'MLUnicode': 'WSUnicode',
        'MLUnset': 'WSUnset',
        'MLUser': 'WSUser',
        'MLUTF': 'WSUTF',
        'MLVersion': 'WSVersion',
        'MLWait': 'WSWait',
        'MLYield': 'WSYield',
        'mlextended_double': 'wsextended_double',
        'mlint64': 'wsint64',
        'mltimeval': 'wstimeval',
        'mathlink.h': 'wstp.h',
        'MathLink': 'WSTP',
        strip_folders(source_file): strip_folders(target_file)
    }

    info_line = ('// This file was generated by ml_to_wstp.py from '
                 f'{strip_folders(source_file)}\n\n')

    with open(source_file, 'r') as file:
        file_data = file.read()

    for source_string, target_string in replace_strings.items():
        file_data = file_data.replace(source_string, target_string)

    file_data = info_line + file_data
    with open(target_file, 'w') as file:
        file.write(file_data)


def main() -> None:
    if len(sys.argv) < 3:
        print(__doc__)
        sys.exit()

    source_file = sys.argv[1]
    target_file = sys.argv[2]
    ml_to_wstp(source_file, target_file)


if __name__ == "__main__":
    main()
